// Code generated by protoc-gen-go.
// source: src/rot13/proto/rot13.proto
// DO NOT EDIT!

/*
Package rot13 is a generated protocol buffer package.

It is generated from these files:
	src/rot13/proto/rot13.proto

It has these top-level messages:
	EncodeRequest
	EncodeResponse
*/
package rot13

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EncodeRequest struct {
	Input string `protobuf:"bytes,1,opt,name=input" json:"input,omitempty"`
}

func (m *EncodeRequest) Reset()                    { *m = EncodeRequest{} }
func (m *EncodeRequest) String() string            { return proto.CompactTextString(m) }
func (*EncodeRequest) ProtoMessage()               {}
func (*EncodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EncodeRequest) GetInput() string {
	if m != nil {
		return m.Input
	}
	return ""
}

type EncodeResponse struct {
	Output string `protobuf:"bytes,2,opt,name=output" json:"output,omitempty"`
}

func (m *EncodeResponse) Reset()                    { *m = EncodeResponse{} }
func (m *EncodeResponse) String() string            { return proto.CompactTextString(m) }
func (*EncodeResponse) ProtoMessage()               {}
func (*EncodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EncodeResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func init() {
	proto.RegisterType((*EncodeRequest)(nil), "EncodeRequest")
	proto.RegisterType((*EncodeResponse)(nil), "EncodeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Publisher API

type Publisher interface {
	Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error
}

type publisher struct {
	c     client.Client
	topic string
}

func (p *publisher) Publish(ctx context.Context, msg interface{}, opts ...client.PublishOption) error {
	return p.c.Publish(ctx, p.c.NewPublication(p.topic, msg), opts...)
}

func NewPublisher(topic string, c client.Client) Publisher {
	if c == nil {
		c = client.NewClient()
	}
	return &publisher{c, topic}
}

// Subscriber API

func RegisterSubscriber(topic string, s server.Server, h interface{}, opts ...server.SubscriberOption) error {
	return s.Subscribe(s.NewSubscriber(topic, h, opts...))
}

// Client API for Rot13 service

type Rot13Client interface {
	Encode(ctx context.Context, in *EncodeRequest, opts ...client.CallOption) (*EncodeResponse, error)
}

type rot13Client struct {
	c           client.Client
	serviceName string
}

func NewRot13Client(serviceName string, c client.Client) Rot13Client {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "rot13"
	}
	return &rot13Client{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *rot13Client) Encode(ctx context.Context, in *EncodeRequest, opts ...client.CallOption) (*EncodeResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Rot13.Encode", in)
	out := new(EncodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rot13 service

type Rot13Handler interface {
	Encode(context.Context, *EncodeRequest, *EncodeResponse) error
}

func RegisterRot13Handler(s server.Server, hdlr Rot13Handler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Rot13{hdlr}, opts...))
}

type Rot13 struct {
	Rot13Handler
}

func (h *Rot13) Encode(ctx context.Context, in *EncodeRequest, out *EncodeResponse) error {
	return h.Rot13Handler.Encode(ctx, in, out)
}

func init() { proto.RegisterFile("src/rot13/proto/rot13.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x2e, 0x2e, 0x4a, 0xd6,
	0x2f, 0xca, 0x2f, 0x31, 0x34, 0xd6, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x87, 0xb0, 0xf5, 0xc0, 0x6c,
	0x25, 0x55, 0x2e, 0x5e, 0xd7, 0xbc, 0xe4, 0xfc, 0x94, 0xd4, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2,
	0x12, 0x21, 0x11, 0x2e, 0xd6, 0xcc, 0xbc, 0x82, 0xd2, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce,
	0x20, 0x08, 0x47, 0x49, 0x83, 0x8b, 0x0f, 0xa6, 0xac, 0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48,
	0x8c, 0x8b, 0x2d, 0xbf, 0xb4, 0x04, 0xa4, 0x90, 0x09, 0xac, 0x10, 0xca, 0x33, 0x32, 0xe1, 0x62,
	0x0d, 0x02, 0x99, 0x2f, 0xa4, 0xcd, 0xc5, 0x06, 0xd1, 0x22, 0xc4, 0xa7, 0x87, 0x62, 0x85, 0x14,
	0xbf, 0x1e, 0xaa, 0x59, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0xd7, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x24, 0x4f, 0x72, 0x59, 0xac, 0x00, 0x00, 0x00,
}
